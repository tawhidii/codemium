Folder Structure
--------------------------------------------------
github_repo_ypy6cnkq/
    .DS_Store
    requirements.txt
    README.md
    .gitignore
    .env.example
    main.py
    core/
        __init__.py
        codemium_engine.py
        __pycache__/
            __init__.cpython-312.pyc
            codemium_engine.cpython-312.pyc
    utils/
        ui.py
        __init__.py
        __pycache__/
            ui.cpython-312.pyc
            __init__.cpython-312.pyc
    faiss_index/
        index.faiss
        index.pkl
    .git/
        config
        HEAD
        description
        index
        packed-refs
        objects/
            pack/
                pack-10780e1b89043548eb68d03c095d13e5db7e05a4.idx
                pack-10780e1b89043548eb68d03c095d13e5db7e05a4.pack
                pack-10780e1b89043548eb68d03c095d13e5db7e05a4.rev
            info/
        info/
            exclude
        logs/
            HEAD
            refs/
                heads/
                    master
                remotes/
                    origin/
                        HEAD
        hooks/
            commit-msg.sample
            pre-rebase.sample
            sendemail-validate.sample
            pre-commit.sample
            applypatch-msg.sample
            fsmonitor-watchman.sample
            pre-receive.sample
            prepare-commit-msg.sample
            post-update.sample
            pre-merge-commit.sample
            pre-applypatch.sample
            pre-push.sample
            update.sample
            push-to-checkout.sample
        refs/
            heads/
                master
            tags/
            remotes/
                origin/
                    HEAD
    data/
        .DS_Store
    assets/
        logo.png
    helpers/
        __init__.py
        code_to_text.py
        __pycache__/
            code_to_text.cpython-312.pyc
            __init__.cpython-312.pyc


File Contents
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/requirements.txt
File type: .txt
aiohttp==3.9.5
aiosignal==1.3.1
altair==5.3.0
annotated-types==0.7.0
attrs==23.2.0
blinker==1.8.2
boto3==1.34.139
botocore==1.34.139
cachetools==5.3.3
certifi==2024.7.4
chardet==5.2.0
charset-normalizer==3.3.2
click==8.1.7
codebase-to-text==1.0.6
dataclasses-json==0.6.7
faiss-cpu==1.8.0.post1
fpdf==1.7.2
frozenlist==1.4.1
gitdb==4.0.11
GitPython==3.1.43
idna==3.7
Jinja2==3.1.4
jmespath==1.0.1
jsonpatch==1.33
jsonpointer==3.0.0
jsonschema==4.22.0
jsonschema-specifications==2023.12.1
langchain==0.2.6
langchain-community==0.2.6
langchain-core==0.2.11
langchain-text-splitters==0.2.2
langsmith==0.1.83
lxml==5.2.2
markdown-it-py==3.0.0
MarkupSafe==2.1.5
marshmallow==3.21.3
mdurl==0.1.2
multidict==6.0.5
mypy-extensions==1.0.0
numpy==1.26.4
orjson==3.10.6
packaging==24.1
pandas==2.2.2
pillow==10.4.0
protobuf==5.27.2
pyarrow==16.1.0
pydantic==2.8.2
pydantic_core==2.20.1
pydeck==0.9.1
Pygments==2.18.0
pypdf==4.2.0
PyPDF2==3.0.1
python-dateutil==2.9.0.post0
python-decouple==3.8
python-docx==1.1.2
pytz==2024.1
PyYAML==6.0.1
referencing==0.35.1
reportlab==4.2.2
requests==2.32.3
rich==13.7.1
rpds-py==0.18.1
s3transfer==0.10.2
six==1.16.0
smmap==5.0.1
SQLAlchemy==2.0.31
streamlit==1.36.0
tenacity==8.4.2
toml==0.10.2
toolz==0.12.1
tornado==6.4.1
typing-inspect==0.9.0
typing_extensions==4.12.2
tzdata==2024.1
urllib3==2.2.2
yarl==1.9.4


--------------------------------------------------
File End
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/README.md
File type: .md


--------------------------------------------------
File End
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/main.py
File type: .py
from utils import codemium_ui

if __name__ == "__main__":
    codemium_ui()


--------------------------------------------------
File End
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/core/codemium_engine.py
File type: .py
import boto3
from langchain_community.vectorstores.faiss import FAISS

from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain.prompts import PromptTemplate

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders.text import TextLoader

from langchain_community.llms.bedrock import Bedrock

from langchain_community.embeddings.bedrock import BedrockEmbeddings
from decouple import config


ACCESS_KEY_ID = config("ACCESS_KEY_ID")
SECRET_KEY = config("SECRET_KEY")
AWS_REGION = config("REGION_NAME")

LLM_MODEL_ID = config("LLM_MODEL_ID")
EMBEDDING_MODEL = config("EMBEDDING_MODEL")

bedrock = boto3.client("bedrock-runtime",
                       aws_access_key_id=ACCESS_KEY_ID,
                       aws_secret_access_key=SECRET_KEY,
                       region_name="ca-central-1")


def get_embedding():
    titan_embeddings = BedrockEmbeddings(model_id=EMBEDDING_MODEL,
                                         client=bedrock)
    return titan_embeddings


def data_ingestion():
    loader = TextLoader("/Users/hasnat/Desktop/codemium/data/data.txt")
    documents = loader.load()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000,
                                                   chunk_overlap=250)
    docs = text_splitter.split_documents(documents)
    return docs


def setup_vector_store(documents):
    vector_store = FAISS.from_documents(
        documents,
        get_embedding(),
    )
    vector_store.save_local("faiss_index")


def load_llm():
    llm = Bedrock(model_id=LLM_MODEL_ID, client=bedrock, model_kwargs={"max_tokens": 512})
    return llm


prompt_template = """Human: 
    You are a conversational assistant designed to help answer questions from an developer. 
    You should reply to the human's question using the information provided below. Include all relevant information but keep your answers detailed. Only answer the question. Do not say things like "according to the training or handbook or according to the information provided...".
    <Information>
    {context}
    </Information>
    {question}

    Assistant:"""

PROMPT = PromptTemplate(template=prompt_template, input_variables=["context", "question"])


def get_response(llm, vector_store, query):
    retrieval_qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=vector_store.as_retriever(
            search_type="similarity", search_kwargs={"k": 3}
        ),
        chain_type_kwargs={"prompt": PROMPT},
        return_source_documents=True,
    )
    response = retrieval_qa.invoke(query)
    return response['result']


--------------------------------------------------
File End
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/utils/ui.py
File type: .py
import os
import streamlit as st
from decouple import config
from langchain_community.vectorstores.faiss import FAISS
from core import data_ingestion, setup_vector_store, get_embedding, load_llm, get_response
from streamlit_cognito_auth import CognitoAuthenticator
from helpers import CodebaseToText

pool_id = config("POOL_ID")
app_client_id = config("APP_CLIENT_ID")
app_client_secret = config("APP_CLIENT_SECRET")

authenticator = CognitoAuthenticator(
    pool_id=pool_id,
    app_client_id=app_client_id,
    app_client_secret=app_client_secret,
    use_cookies=False
)


def logout():
    print("Logout in example")
    authenticator.logout()


def codemium_ui():
    st.set_page_config("CodeMium")

    is_logged_in = authenticator.login()

    if not is_logged_in:
        st.stop()

    logo_url = "https://i.imghippo.com/files/1J67j1720265311.png"
    st.markdown(
        f"""
            <div style="display: flex; justify-content: center;">
                <img src="{logo_url}" alt="Logo" style="width: 150px;">
            </div>
            """,
        unsafe_allow_html=True
    )

    user_question = st.text_area("Ask me about your project")

    with st.sidebar:
        st.text(f"Welcome,\n{authenticator.get_email()}")
        st.button("Logout", "logout_btn", on_click=logout)

        st.title("Create Vector Embeddings")
        if st.button("Update Vector DB"):
            with st.spinner("Running ...."):
                docs = data_ingestion()
                setup_vector_store(docs)
                st.success("Vector Embeddings Successful ")

        st.title("Process code to text")
        process_data_input = st.text_input("Enter github url or project folder path:")
        if st.button("Process Data"):
            with st.spinner("Running ...."):
                code_to_text = CodebaseToText(input_path=process_data_input,
                                              exclude_hidden=True,
                                              output_type="txt",
                                              output_path="/Users/hasnat/Desktop/codemium/data/data.txt")
                code_to_text.get_file()
                st.success("Success !")

    if st.button("Generate Response !") or user_question:
        # first check if the vector store exists
        if not os.path.exists("faiss_index"):
            st.error("Please create the vector store first from the sidebar.")
            return
        if not user_question:
            st.error("Please enter a question.")
            return
        with st.spinner("Running ...."):
            faiss_index = FAISS.load_local("faiss_index", embeddings=get_embedding(),
                                           allow_dangerous_deserialization=True)
            llm = load_llm()
            st.write(get_response(llm, faiss_index, user_question))
            st.success("Done")


--------------------------------------------------
File End
--------------------------------------------------


/var/folders/7r/tctqskv1239546mcm5h55rqw0000gn/T/github_repo_ypy6cnkq/helpers/code_to_text.py
File type: .py

import os
import git
import shutil

from docx import Document
import tempfile


class CodebaseToText:
    def __init__(self, input_path, output_path, output_type, verbose=None, exclude_hidden=None):
        self.input_path = input_path
        self.output_path = output_path
        self.output_type = output_type
        self.verbose = verbose
        self.exclude_hidden = exclude_hidden
        self.temp_folder_path = None

    def _parse_folder(self, folder_path):
        tree = ""
        for root, dirs, files in os.walk(folder_path):
            level = root.replace(folder_path, '').count(os.sep)
            indent = ' ' * 4 * (level)
            tree += '{}{}/\n'.format(indent, os.path.basename(root))
            subindent = ' ' * 4 * (level + 1)
            for f in files:
                tree += '{}{}\n'.format(subindent, f)

        if self.verbose:
            print(f"The file tree to be processed:\n {tree}")

        return tree

    def _get_file_contents(self, file_path):
        with open(file_path, 'r') as file:
            return file.read()

    def _is_hidden_file(self, file_path):
        components = os.path.normpath(file_path).split(os.sep)
        # print(f"componetns {components}")
        for c in components:
            if c.startswith((".", "__")):
                return True
        return False

    def _process_files(self, path):
        content = ""
        for root, _, files in os.walk(path):
            for file in files:
                file_path = os.path.join(root, file)
                if self.exclude_hidden and self._is_hidden_file(os.path.abspath(file_path)):
                    if self.verbose:
                        print(f"Ignoring hidden file {file_path}")
                    continue

                try:
                    if self.verbose:
                        print(f"Processing: {file_path}")
                    file_content = self._get_file_contents(file_path)
                    content += f"\n\n{file_path}\n"
                    content += f"File type: {os.path.splitext(file_path)[1]}\n"
                    content += f"{file_content}"
                    # Add section headers and delimiters after each file
                    content += f"\n\n{'-' * 50}\nFile End\n{'-' * 50}\n"
                except:
                    print(f"Couldn't process {file_path}")
        return content

    def get_text(self):
        folder_structure = ""
        file_contents = ""
        if self.is_github_repo():
            self._clone_github_repo()
            folder_structure = self._parse_folder(self.temp_folder_path)
            file_contents = self._process_files(self.temp_folder_path)
        else:
            folder_structure = self._parse_folder(self.input_path)
            file_contents = self._process_files(self.input_path)

        # Section headers
        folder_structure_header = "Folder Structure"
        file_contents_header = "File Contents"

        # Delimiters
        delimiter = "-" * 50

        # Format the final text
        final_text = f"{folder_structure_header}\n{delimiter}\n{folder_structure}\n\n{file_contents_header}\n{delimiter}\n{file_contents}"

        return final_text

    def get_file(self):
        text = self.get_text()
        if self.output_type == "txt":
            with open(self.output_path, "w") as file:
                file.write(text)
        elif self.output_type == "docx":
            doc = Document()
            doc.add_paragraph(text)
            doc.save(self.output_path)
        else:
            raise ValueError("Invalid output type. Supported types: txt, docx")

    #### Github ####

    def _clone_github_repo(self):
        try:
            self.temp_folder_path = tempfile.mkdtemp(prefix="github_repo_")
            repo = git.Repo.clone_from(self.input_path, self.temp_folder_path)
            if self.verbose:
                print("GitHub repository cloned successfully.")
        except Exception as e:
            print(f"Error cloning GitHub repository: {e}")

    def is_github_repo(self):
        return self.input_path.startswith("https://github.com/") or self.input_path.startswith("git@github.com:")

    def is_temp_folder_used(self):
        return self.temp_folder_path is not None

    def clean_up_temp_folder(self):
        if self.temp_folder_path:
            shutil.rmtree(self.temp_folder_path)


--------------------------------------------------
File End
--------------------------------------------------
